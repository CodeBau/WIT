/*console generator function in winapi*/
//void CreateConsole()
//{
//    if (!AllocConsole()) {
//        // Add some error handling here.
//        // You can call GetLastError() to get more info about the error.
//        return;
//    }
//
//    // std::cout, std::clog, std::cerr, std::cin
//    FILE* fDummy;
//    freopen_s(&fDummy, "CONOUT$", "w", stdout);
//    freopen_s(&fDummy, "CONOUT$", "w", stderr);
//    freopen_s(&fDummy, "CONIN$", "r", stdin);
//    std::cout.clear();
//    std::clog.clear();
//    std::cerr.clear();
//    std::cin.clear();
//
//    // std::wcout, std::wclog, std::wcerr, std::wcin
//    HANDLE hConOut = CreateFile(_T("CONOUT$"), GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
//    HANDLE hConIn = CreateFile(_T("CONIN$"), GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
//    SetStdHandle(STD_OUTPUT_HANDLE, hConOut);
//    SetStdHandle(STD_ERROR_HANDLE, hConOut);
//    SetStdHandle(STD_INPUT_HANDLE, hConIn);
//    std::wcout.clear();
//    std::wclog.clear();
//    std::wcerr.clear();
//    std::wcin.clear();
//}

/*  Create console */
    //CreateConsole();



       case WM_CREATE:
                     /*always load images first */
        

                    /* CreateWindow(L"BUTTON",
                                         L"Przyc 1",
                                         WS_CHILD | WS_VISIBLE | BS_FLAT,
                                         10, 10, 100, 20,
                                         hwnd, (HMENU) 1, NULL, NULL);
                     CreateWindow(L"BUTTON",
                                         L"Przyc 2",
                                         WS_CHILD | WS_VISIBLE | BS_FLAT,
                                         10, 40, 100, 20,
                                         hwnd, (HMENU) 2, NULL, NULL);
                     TextBox = CreateWindow(L"EDIT",
                                          L"",
                                          WS_CHILD | WS_VISIBLE | WS_BORDER,
                                          10, 80, 100, 20,
                                          hwnd, NULL, NULL, NULL);
                     CreateWindow(L"BUTTON",
                                           L"GO",
                                           WS_CHILD | WS_VISIBLE | BS_FLAT,
                                           10, 110, 100, 20,
                                           hwnd, (HMENU)3, NULL, NULL);*/
                 

                /*g_hEdit = CreateWindowEx(WS_EX_CLIENTEDGE, (LPCWSTR)L"EDIT", NULL,
                    WS_CHILD | WS_VISIBLE | WS_BORDER | WS_VSCROLL | ES_MULTILINE | ES_AUTOVSCROLL,
                    10, 10, 300, 100, hwnd, NULL, NULL, NULL);
                if (!g_hEdit)
                    SendMessage(hwnd, WM_CLOSE, NULL, NULL);

                SetWindowText(g_hEdit, L"Wpisz tu coú...");

                g_hButW = CreateWindowEx(WS_EX_CLIENTEDGE, (LPCWSTR)L"BUTTON", L"Zapisz tekst",
                    WS_CHILD | WS_VISIBLE | WS_BORDER, 10, 150, 150, 30,
                    hwnd, (HMENU)ID_BUTTON_WRITE, NULL, NULL);
                if (!g_hButW) SendMessage(hwnd, WM_CLOSE, NULL, NULL);

                g_hButC = CreateWindowEx(WS_EX_CLIENTEDGE, (LPCWSTR)L"BUTTON", L"Wyjdü",
                    WS_CHILD | WS_VISIBLE | WS_BORDER, 200, 150, 150, 30,
                    hwnd, (HMENU)ID_BUTTON_CLOSE, NULL, NULL);
                if (!g_hButC) SendMessage(hwnd, WM_CLOSE, NULL, NULL);
                */

case WM_LBUTTONDOWN: {

//    //HDC hdc = GetDC(hwnd);

        //    //Rectangle(hdc, x, y, x + 5, y + 20);
        //    //TextOut(hdc, x, y, L"Hallo", 10);
        //    //myTextOut(hdc, x, y, L"Marcin");
        //    //myTextOut(hdc, x, y + 20, L"Lesniewski");
        //   
        //    //POINT pt;
        //    //MoveToEx(hdc, x, y, &pt);
        //    //LineTo(hdc, x+10, y+10);
        //    //LineDDA(50, 50, x, y,);

        //    /*for (int j = 0; j < 256; j++) {
        //        for (int i = 0; i < 256; i++) {
        //            COLORREF color = RGB(i, j, 0);
        //            SetPixel(hdc, x+i, y+j, color);
        //        }
        //    }*/
        //    
        //    /*HBRUSH brush=CreateSolidBrush(RGB(0, 100, 255));
        //    SelectObject(hdc, brush);
        //    Rectangle(hdc, x - 25, y - 25, x + 25, y + 25);
        //    DeleteObject(brush);*/

        //    
        //    /*HBRUSH brush=CreateHatchBrush(HS_CROSS, RGB(0, 100, 255));
        //    SelectObject(hdc, brush);
        //    Rectangle(hdc, x - 25, y - 25, x + 25, y + 25);
        //    DeleteObject(brush);*/
        //    
        //    /*HBRUSH brush=CreateHatchBrush(HS_CROSS, RGB(0, 100, 255));
        //    HPEN pen = CreatePen(PS_SOLID, 5, RGB(255,0,0));
        //    SelectObject(hdc, brush);
        //    SelectObject(hdc, pen);
        //    Rectangle(hdc, x - 25, y - 25, x + 25, y + 25);
        //    DeleteObject(brush);
        //    DeleteObject(pen);*/

        //   /*HBRUSH brush=CreateHatchBrush(HS_CROSS, RGB(0, 100, 255));
        //   HPEN pen = CreatePen(PS_SOLID, 5, RGB(255,0,0));
        //   SelectObject(hdc, brush);
        //   SelectObject(hdc, pen);
        //   SelectObject(hdc, GetStockObject(GRAY_BRUSH));
        //   Rectangle(hdc, x - 25, y - 25, x + 25, y + 25);
        //   DeleteObject(brush);
        //   DeleteObject(pen);*/

        //   /*SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));
        //   myTextOut(hdc, x, y, L"Marcin");

        //    ReleaseDC(hwnd, hdc);*/
        \

        case WM_CREATE:
                
                    CreateWindow(L"STATIC",
                        L"Logowanie",
                        WS_CHILD | WS_VISIBLE,
                        10, 10, 100, 20,
                        hwnd, NULL, NULL, NULL);

                    CreateWindow(L"BUTTON",
                        L"Przyc 1",
                        WS_CHILD | WS_VISIBLE | BS_FLAT,
                        10, 30, 100, 20,
                        hwnd, (HMENU)1, NULL, NULL);

                break;

                /*case WM_PAINT:

                break;*/

                case WM_COMMAND:

                    switch (wParam) {
                    case 1:
                        ::MessageBox(hwnd, L"Przyc 1", L"", MB_OK);
                        opc = 1;
                        PostQuitMessage(0);
                        break;
                    }
                    break;

                break;

                case WM_DESTROY:
                    PostQuitMessage(0);       /* send a WM_QUIT to the message queue */
                    break;
                default:                      /* for messages that we don't deal with */
                    return DefWindowProc(hwnd, message, wParam, lParam);

                }
                break;

                case 1:


                MyBitmap bmp;

    LRESULT CALLBACK WindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
    {
        
        switch (message)                  /* handle the messages */
            {
            case WM_CREATE:
                bmp.loadFromFile();
                
            break;
   

            case WM_PAINT:
                PAINTSTRUCT ps;
                BeginPaint(hwnd, &ps);
                bmp.draw(ps.hdc, 10, 10);


    int scrx = GetSystemMetrics(SM_CXSCREEN);
    int scry = GetSystemMetrics(SM_CYSCREEN);
    int windx = 600;
    int windy = 400;
    int scrcentralx = (scrx / 2) - (windx / 2);
    int scrcentraly = (scry / 2) - (windy / 2);
  
    hwnd = CreateWindow(
 //           0,                   /* Extended possibilites for variation */
            szClassName,         /* Classname */
            szTitle,           /* Title Text */
            WS_OVERLAPPEDWINDOW,
            //WS_MINIMIZEBOX | WS_SYSMENU | WS_CAPTION, /* default window */
            scrcentralx,       /* Windows decides the position */
            scrcentraly,       /* where the window ends up on the screen */
            windx,                 /* The programs width */
            windy,                 /* and height in pixels */
            HWND_DESKTOP,        /* The window is a child-window to desktop */
            NULL,                /* No menu */
            hThisInstance,       /* Program Instance handler */
            NULL                 /* No Window Creation data */
    );

    od chinczyka tworzenie Button and Edit
    CreateWindowEx(0, L"Button", L"Test", WS_CHILD | WS_VISIBLE, 10, 100, 200, 40, hwnd, (HMENU)10, hInstance, nullptr);
    CreateWindowEx(0, L"Edit", L"Text Input...", WS_CHILD | WS_VISIBLE | WS_BORDER, 220, 100, 200, 40, hwnd, nullptr, hInstance, nullptr);


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!






!!!!!!!!!!!!!!!!!!!!!!!!!!!
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{
	case WM_DESTROY: {
		PostQuitMessage(0);
		return 0;
	}

	case WM_COMMAND: {
		printf("WM_COMMAND %d\n", wParam);
	}break;
	} // switch    
	return DefWindowProc(hWnd, message, wParam, lParam);
}





RECT rc;
        SetRect(&rc, 100, 25, 100 + button_size_x, 25 + button_size_y);
        //::FillRect(ps.hdc, &rc, hBrush);

        hFont = CreateFont(20, 0, 0, 0, 300, FALSE, FALSE, FALSE, DEFAULT_CHARSET, NULL, NULL, NULL, NULL, TEXT("Calibri"));
        SelectObject(ps.hdc, hFont);
        SetTextColor(ps.hdc, RGB(0, 72, 0));
        SetBkMode(ps.hdc, TRANSPARENT);
        DrawText(ps.hdc, L"Podaj adres serwera:", -1, &rc, DT_SINGLELINE | DT_CENTER | DT_VCENTER);

        SetRect(&rc, 100, 87, 100 + button_size_x, 87 + button_size_y);
        DrawText(ps.hdc, L"Podaj has≥o do serwera:", -1, &rc, DT_SINGLELINE | DT_CENTER | DT_VCENTER);

        SetRect(&rc, 100, 149, 110 + button_size_x, 149 + button_size_y);
        DrawText(ps.hdc, L"ZapamiÍtaj dane logowania", -1, &rc, DT_SINGLELINE  | DT_VCENTER);
        
        SetRect(&rc, 100, 186, 110 + button_size_x, 186 + button_size_y);
        DrawText(ps.hdc, L"Autologowanie", -1, &rc, DT_SINGLELINE  | DT_VCENTER);

        SetRect(&rc, 50, 245, 500, 246);
        ::FillRect(ps.hdc, &rc, hBrush);

        SetRect(&rc, 100, 283, 110 + button_size_x, 283 + button_size_y);
        DrawText(ps.hdc, L"Zawsze uruchamiaj w trybie offline", -1, &rc, DT_SINGLELINE | DT_VCENTER);


        EndPaint(hWnd, &ps);